package slavikcodd3r.rainbow.module.modules.exploits;

import java.util.LinkedList;
import java.util.Random;

import io.netty.buffer.Unpooled;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGameOver;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;
import net.minecraft.network.play.client.C11PacketEnchantItem;
import net.minecraft.network.play.client.C12PacketUpdateSign;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.client.C15PacketClientSettings;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.client.C18PacketSpectate;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S03PacketTimeUpdate;
import net.minecraft.network.play.server.S04PacketEntityEquipment;
import net.minecraft.network.play.server.S05PacketSpawnPosition;
import net.minecraft.network.play.server.S06PacketUpdateHealth;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S09PacketHeldItemChange;
import net.minecraft.network.play.server.S0APacketUseBed;
import net.minecraft.network.play.server.S0BPacketAnimation;
import net.minecraft.network.play.server.S0CPacketSpawnPlayer;
import net.minecraft.network.play.server.S0DPacketCollectItem;
import net.minecraft.network.play.server.S0EPacketSpawnObject;
import net.minecraft.network.play.server.S0FPacketSpawnMob;
import net.minecraft.network.play.server.S10PacketSpawnPainting;
import net.minecraft.network.play.server.S11PacketSpawnExperienceOrb;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S13PacketDestroyEntities;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityHeadLook;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S1BPacketEntityAttach;
import net.minecraft.network.play.server.S1CPacketEntityMetadata;
import net.minecraft.network.play.server.S1DPacketEntityEffect;
import net.minecraft.network.play.server.S1EPacketRemoveEntityEffect;
import net.minecraft.network.play.server.S1FPacketSetExperience;
import net.minecraft.network.play.server.S20PacketEntityProperties;
import net.minecraft.network.play.server.S21PacketChunkData;
import net.minecraft.network.play.server.S22PacketMultiBlockChange;
import net.minecraft.network.play.server.S23PacketBlockChange;
import net.minecraft.network.play.server.S24PacketBlockAction;
import net.minecraft.network.play.server.S25PacketBlockBreakAnim;
import net.minecraft.network.play.server.S26PacketMapChunkBulk;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.network.play.server.S28PacketEffect;
import net.minecraft.network.play.server.S29PacketSoundEffect;
import net.minecraft.network.play.server.S2APacketParticles;
import net.minecraft.network.play.server.S2BPacketChangeGameState;
import net.minecraft.network.play.server.S2CPacketSpawnGlobalEntity;
import net.minecraft.network.play.server.S2DPacketOpenWindow;
import net.minecraft.network.play.server.S2EPacketCloseWindow;
import net.minecraft.network.play.server.S2FPacketSetSlot;
import net.minecraft.network.play.server.S30PacketWindowItems;
import net.minecraft.network.play.server.S31PacketWindowProperty;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.network.play.server.S33PacketUpdateSign;
import net.minecraft.network.play.server.S34PacketMaps;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import net.minecraft.network.play.server.S36PacketSignEditorOpen;
import net.minecraft.network.play.server.S37PacketStatistics;
import net.minecraft.network.play.server.S38PacketPlayerListItem;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import net.minecraft.network.play.server.S3APacketTabComplete;
import net.minecraft.network.play.server.S3BPacketScoreboardObjective;
import net.minecraft.network.play.server.S3CPacketUpdateScore;
import net.minecraft.network.play.server.S3DPacketDisplayScoreboard;
import net.minecraft.network.play.server.S3EPacketTeams;
import net.minecraft.network.play.server.S3FPacketCustomPayload;
import net.minecraft.network.play.server.S41PacketServerDifficulty;
import net.minecraft.network.play.server.S42PacketCombatEvent;
import net.minecraft.network.play.server.S43PacketCamera;
import net.minecraft.network.play.server.S44PacketWorldBorder;
import net.minecraft.network.play.server.S45PacketTitle;
import net.minecraft.network.play.server.S46PacketSetCompressionLevel;
import net.minecraft.network.play.server.S47PacketPlayerListHeaderFooter;
import net.minecraft.network.play.server.S48PacketResourcePackSend;
import net.minecraft.network.play.server.S49PacketUpdateEntityNBT;
import net.minecraft.network.status.client.C00PacketServerQuery;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.network.status.server.S00PacketServerInfo;
import net.minecraft.network.status.server.S01PacketPong;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C01PacketChatMessage;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.Timer;
import net.minecraft.world.WorldSettings;
import slavikcodd3r.rainbow.event.Event;
import slavikcodd3r.rainbow.event.EventTarget;
import slavikcodd3r.rainbow.event.events.MoveEvent;
import slavikcodd3r.rainbow.event.events.PacketReceiveEvent;
import slavikcodd3r.rainbow.event.events.PacketSendEvent;
import slavikcodd3r.rainbow.event.events.TickEvent;
import slavikcodd3r.rainbow.event.events.UpdateEvent;
import slavikcodd3r.rainbow.module.Module;
import slavikcodd3r.rainbow.module.modes.DisablerMode;
import slavikcodd3r.rainbow.option.OptionManager;
import slavikcodd3r.rainbow.utils.ClientUtils;
import slavikcodd3r.rainbow.utils.NetUtil;
import slavikcodd3r.rainbow.utils.TimeHelper;

@Module.Mod(displayName = "Disabler")
public class Disabler extends Module
{
	private DisablerMode riding;
	private DisablerMode ncp;
    private DisablerMode mineplexground;
    private DisablerMode spartan;
    private DisablerMode rinaorc;
    private DisablerMode packet;
    private DisablerMode noevent;
    private DisablerMode aac;
    private DisablerMode chat;
    private DisablerMode viper;
    private DisablerMode janitor;
    private DisablerMode playerpos;
    private DisablerMode unknownpos;
    private DisablerMode keepalive;
    private DisablerMode guardian;
    private DisablerMode state;
    private DisablerMode hcf;
    private DisablerMode bed;
    private DisablerMode dead;
    private DisablerMode horizon;
    private DisablerMode damage;
    private DisablerMode rac;
    private DisablerMode acr;
    private DisablerMode hover;
    private DisablerMode verus;
    private DisablerMode cancel;
    private DisablerMode capabilities;
    private DisablerMode spectate;
    private DisablerMode hypixel;
    public static Minecraft mc = Minecraft.getMinecraft();
    public TimeHelper timer;
    
    public Disabler() {
        this.riding = new DisablerMode("Riding", true, this);
        this.ncp = new DisablerMode("NCP", false, this);
        this.mineplexground = new DisablerMode("MineplexGround", false, this);
        this.spartan = new DisablerMode("Spartan", false, this);
        this.rinaorc = new DisablerMode("RinaOrc", false, this);
        this.packet = new DisablerMode("Packet", false, this);
        this.noevent = new DisablerMode("NoEvent", false, this);
        this.aac = new DisablerMode("AAC", false, this);
        this.chat = new DisablerMode("Chat", false, this);
        this.viper = new DisablerMode("Viper", false, this);
        this.janitor = new DisablerMode("Janitor", false, this);
        this.playerpos = new DisablerMode("PlayerPos", false, this);
        this.unknownpos = new DisablerMode("UnknownPos", false, this);
        this.keepalive = new DisablerMode("KeepAlive", false, this);
        this.guardian = new DisablerMode("Guardian", false, this);
        this.state = new DisablerMode("State", false, this);
        this.hcf = new DisablerMode("HCF", false, this);
        this.bed = new DisablerMode("Bed", false, this);
        this.dead = new DisablerMode("Dead", false, this);
        this.horizon = new DisablerMode("Horizon", false, this);
        this.damage = new DisablerMode("Damage", false, this);
        this.rac = new DisablerMode("RAC", false, this);
        this.acr = new DisablerMode("ACR", false, this);
        this.hover = new DisablerMode("Hover", false, this);
        this.verus = new DisablerMode("Verus", false, this);
        this.cancel = new DisablerMode("Cancel", false, this);
        this.capabilities = new DisablerMode("Capabilities", false, this);
        this.spectate = new DisablerMode("Spectate", false, this);
        this.hypixel = new DisablerMode("Hypixel", false, this);
    }
    
    @Override
    public void preInitialize() {
        OptionManager.getOptionList().add(this.riding);
        OptionManager.getOptionList().add(this.ncp);
        OptionManager.getOptionList().add(this.mineplexground);
        OptionManager.getOptionList().add(this.spartan);
        OptionManager.getOptionList().add(this.rinaorc);
        OptionManager.getOptionList().add(this.packet);
        OptionManager.getOptionList().add(this.noevent);
        OptionManager.getOptionList().add(this.aac);
        OptionManager.getOptionList().add(this.chat);
        OptionManager.getOptionList().add(this.viper);
        OptionManager.getOptionList().add(this.janitor);
        OptionManager.getOptionList().add(this.playerpos);
        OptionManager.getOptionList().add(this.unknownpos);
        OptionManager.getOptionList().add(this.keepalive);
        OptionManager.getOptionList().add(this.guardian);
        OptionManager.getOptionList().add(this.state);
        OptionManager.getOptionList().add(this.hcf);
        OptionManager.getOptionList().add(this.bed);
        OptionManager.getOptionList().add(this.dead);
        OptionManager.getOptionList().add(this.horizon);
        OptionManager.getOptionList().add(this.damage);
        OptionManager.getOptionList().add(this.rac);
        OptionManager.getOptionList().add(this.acr);
        OptionManager.getOptionList().add(this.hover);
        OptionManager.getOptionList().add(this.verus);
        OptionManager.getOptionList().add(this.cancel);
        OptionManager.getOptionList().add(this.capabilities);
        OptionManager.getOptionList().add(this.spectate);
        OptionManager.getOptionList().add(this.hypixel);
        this.updateSuffix();
        super.preInitialize();
    }
    
    public void updateSuffix() {
        if (this.riding.getValue()) {
            this.setSuffix("Riding");
        }
        else if (this.ncp.getValue()) {
        	this.setSuffix("NCP");
        }
        else if (this.mineplexground.getValue()) {
            this.setSuffix("MineplexGround");
        }
        else if (this.spartan.getValue()) {
            this.setSuffix("Spartan");
        }
        else if (this.rinaorc.getValue()) {
            this.setSuffix("RinaOrc");
        }
        else if (this.packet.getValue()) {
            this.setSuffix("Packet");
        }
        else if (this.noevent.getValue()) {
            this.setSuffix("NoEvent");
        }
        else if (this.aac.getValue()) {
            this.setSuffix("AAC");
        }
        else if (this.chat.getValue()) {
            this.setSuffix("Chat");
        }
        else if (this.viper.getValue()) {
            this.setSuffix("Viper");
        }
        else if (this.janitor.getValue()) {
            this.setSuffix("Janitor");
        }
        else if (this.playerpos.getValue()) {
            this.setSuffix("PlayerPos");
        }
        else if (this.unknownpos.getValue()) {
            this.setSuffix("UnknownPos");
        }
        else if (this.keepalive.getValue()) {
            this.setSuffix("KeepAlive");
        }
        else if (this.guardian.getValue()) {
            this.setSuffix("Guardian");
        }
        else if (this.state.getValue()) {
            this.setSuffix("State");
        }
        else if (this.hcf.getValue()) {
            this.setSuffix("HCF");
        }
        else if (this.bed.getValue()) {
            this.setSuffix("Bed");
        }
        else if (this.dead.getValue()) {
            this.setSuffix("Dead");
        }
        else if (this.horizon.getValue()) {
            this.setSuffix("Horizon");
        }
        else if (this.damage.getValue()) {
            this.setSuffix("Damage");
        }
        else if (this.rac.getValue()) {
            this.setSuffix("RAC");
        }
        else if (this.acr.getValue()) {
            this.setSuffix("ACR");
        }
        else if (this.hover.getValue()) {
            this.setSuffix("Hover");
        }
        else if (this.verus.getValue()) {
            this.setSuffix("Verus");
        }
        else if (this.cancel.getValue()) {
            this.setSuffix("Cancel");
        }
        else if (this.capabilities.getValue()) {
            this.setSuffix("Capabilities");
        }
        else if (this.spectate.getValue()) {
            this.setSuffix("Spectate");
        }
        else if (this.hypixel.getValue()) {
            this.setSuffix("Hypixel");
        }
    }
    
    public void enable() {
		if (this.horizon.getValue()) {
    		ClientUtils.sendMessage("Board the boat and fall with it from 4 blocks or more to use Disabler Horizon");
		}
		else if (this.verus.getValue()) {
			ClientUtils.sendMessage("Relog to use Disabler Verus");
		}
    	super.enable();
    }
    
    public void disable() {
		if (this.dead.getValue()) {
			mc.thePlayer.respawnPlayer();
		}
		else if (this.acr.getValue()) {
			ClientUtils.mc().thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(ClientUtils.mc().thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
		}
    	Timer.timerSpeed = 1.0f;
    	super.disable();
    }
    
    @EventTarget
    public void onTick(final TickEvent event) {
        this.updateSuffix();
    }
    
    @EventTarget
    public void onPacket(final PacketReceiveEvent event) {
    	if (this.verus.getValue()) {
    		if (event.getPacket() instanceof S32PacketConfirmTransaction) {
    			event.setCancelled(true);
    		}
    		if (event.getPacket() instanceof S00PacketKeepAlive) {
    			event.setCancelled(true);
    		}
        }
    	else if (this.cancel.getValue()) {
			if (event.getPacket() instanceof S0EPacketSpawnObject) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S11PacketSpawnExperienceOrb) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S2CPacketSpawnGlobalEntity) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S0FPacketSpawnMob) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S3BPacketScoreboardObjective) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S10PacketSpawnPainting) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S0CPacketSpawnPlayer) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S0BPacketAnimation) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S37PacketStatistics) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S25PacketBlockBreakAnim) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S36PacketSignEditorOpen) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S35PacketUpdateTileEntity) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S24PacketBlockAction) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S23PacketBlockChange) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S02PacketChat) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S3APacketTabComplete) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S22PacketMultiBlockChange) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S34PacketMaps) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S32PacketConfirmTransaction) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S2EPacketCloseWindow) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S30PacketWindowItems) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S2DPacketOpenWindow) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S31PacketWindowProperty) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S2FPacketSetSlot) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S3FPacketCustomPayload) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S0APacketUseBed) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S19PacketEntityStatus) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S1BPacketEntityAttach) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S27PacketExplosion) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S2BPacketChangeGameState) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S00PacketKeepAlive) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S21PacketChunkData) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S26PacketMapChunkBulk) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S28PacketEffect) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S14PacketEntity) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S2APacketParticles) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S39PacketPlayerAbilities) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S38PacketPlayerListItem) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S13PacketDestroyEntities) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S1EPacketRemoveEntityEffect) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S07PacketRespawn) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S19PacketEntityHeadLook) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S09PacketHeldItemChange) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S3DPacketDisplayScoreboard) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S1CPacketEntityMetadata) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S12PacketEntityVelocity) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S04PacketEntityEquipment) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S1FPacketSetExperience) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S06PacketUpdateHealth) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S3EPacketTeams) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S3CPacketUpdateScore) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S05PacketSpawnPosition) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S03PacketTimeUpdate) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S33PacketUpdateSign) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S29PacketSoundEffect) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S0DPacketCollectItem) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S18PacketEntityTeleport) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S20PacketEntityProperties) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S1DPacketEntityEffect) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S42PacketCombatEvent) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S41PacketServerDifficulty) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S43PacketCamera) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S44PacketWorldBorder) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S45PacketTitle) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S0EPacketSpawnObject) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S46PacketSetCompressionLevel) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S47PacketPlayerListHeaderFooter) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S48PacketResourcePackSend) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S49PacketUpdateEntityNBT) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S01PacketPong) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof S00PacketServerInfo) {
				event.setCancelled(true);
			}
    	}
    	else if (this.capabilities.getValue()) {
    		if (event.getPacket() instanceof S32PacketConfirmTransaction) {
    			event.setCancelled(true);
    		}
    		if (event.getPacket() instanceof S00PacketKeepAlive) {
    			event.setCancelled(true);
    		}
        }
    	else if (this.hypixel.getValue()) {
    		if (event.getPacket() instanceof S32PacketConfirmTransaction) {
    			event.setCancelled(true);
    		}
    		if (event.getPacket() instanceof S00PacketKeepAlive) {
    			event.setCancelled(true);
    		}
        }
     }
    
    @EventTarget
    public void onPacket(final PacketSendEvent event) {
    	if (this.ncp.getValue()) {
    		if (event.getPacket() instanceof C13PacketPlayerAbilities) {
                final C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities)event.getPacket();
                packet.allowFlying = true;
                packet.creativeMode = true;
                packet.flying = true;
                packet.setAllowFlying(true);
                packet.setCreativeMode(true);
                packet.setFlying(true);
    			ClientUtils.sendMessage("[NCP Disabler] Debug " + mc.thePlayer.ticksExisted);
    		}
    	}
    	else if (this.chat.getValue()) {
			if (event.getPacket() instanceof C00PacketKeepAlive) {
                mc.thePlayer.sendChatMessage(event.getPacket().toString());
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
            	mc.thePlayer.sendChatMessage(event.getPacket().toString());
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof C0BPacketEntityAction) {
            	mc.thePlayer.sendChatMessage(event.getPacket().toString());
                event.setCancelled(true);
            }
		}
		else if (this.verus.getValue()) {
            if (event.getPacket() instanceof C0BPacketEntityAction) {
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof C03PacketPlayer) {
            	NetUtil.sendPacketNoEvents(new C0CPacketInput());
            }
            if (event.getPacket() instanceof C0CPacketInput) {
                final C0CPacketInput packet = (C0CPacketInput)event.getPacket();
                packet.forwardSpeed = Float.POSITIVE_INFINITY;
                packet.strafeSpeed = Float.POSITIVE_INFINITY;
                packet.jumping = (mc.thePlayer.ticksExisted % 2 == 0);
                packet.sneaking = (mc.thePlayer.ticksExisted % 2 != 0);
            }
		}
		else if (this.cancel.getValue()) {
			if (event.getPacket() instanceof C0APacketAnimation) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C01PacketChatMessage) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C14PacketTabComplete) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C16PacketClientStatus) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C15PacketClientSettings) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C11PacketEnchantItem) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C0EPacketClickWindow) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C0DPacketCloseWindow) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C17PacketCustomPayload) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C02PacketUseEntity) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C00PacketKeepAlive) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C13PacketPlayerAbilities) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C07PacketPlayerDigging) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C13PacketPlayerAbilities) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C07PacketPlayerDigging) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C0BPacketEntityAction) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C0CPacketInput) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C09PacketHeldItemChange) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C10PacketCreativeInventoryAction) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C12PacketUpdateSign) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C18PacketSpectate) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C19PacketResourcePackStatus) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C01PacketPing) {
				event.setCancelled(true);
			}
			if (event.getPacket() instanceof C00PacketServerQuery) {
				event.setCancelled(true);
			}
		}
		else if (this.capabilities.getValue()) {
            if (event.getPacket() instanceof C03PacketPlayer) {
            	NetUtil.sendPacketNoEvents(new C13PacketPlayerAbilities());
            }
            if (event.getPacket() instanceof C13PacketPlayerAbilities) {
                final C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities)event.getPacket();
                packet.allowFlying = true;
                packet.creativeMode = true;
                packet.flying = true;
                packet.setAllowFlying(true);
                packet.setCreativeMode(true);
                packet.setFlying(true);
                packet.setFlySpeed(Float.POSITIVE_INFINITY);
                packet.setWalkSpeed(Float.POSITIVE_INFINITY);
            }
		}
    }
    
    @EventTarget
    public void onUpdate(final UpdateEvent event) {
		if (this.riding.getValue()) {
			ClientUtils.mc().thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(ClientUtils.mc().thePlayer, C0BPacketEntityAction.Action.RIDING_JUMP));
    }
		else if (this.ncp.getValue()) {
			// mc.playerController.setGameType(WorldSettings.GameType.SURVIVAL);
		}
		else if (this.mineplexground.getValue()) {
	        final C08PacketPlayerBlockPlacement place = new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer).add(0, -1, 0), EnumFacing.UP.getIndex(), null, 0.5f, 1.0f, 0.5f);
	        mc.thePlayer.sendQueue.addToSendQueue(place);
		}
		else if (this.spartan.getValue()) {
			mc.getNetHandler().addToSendQueue(new C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY - 1, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround ? true : false));
	        if (mc.thePlayer.ticksExisted % 2 == 0) {
	        	mc.getNetHandler().addToSendQueue(new C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY + 1, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
	        }
		}		
		else if (this.rinaorc.getValue()) {
			if (this.mc.thePlayer.ticksExisted < 10) {
                for (int i = 0; i < 10; ++i) {
                    this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
                }
            }
		}
		else if (this.packet.getValue()) {
            for (int i = 0; i < 10; ++i) {
                this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
			}
		}
		else if (this.noevent.getValue()) {
			if (this.mc.thePlayer.ticksExisted % 1 == 0) {
			NetUtil.sendPacketNoEvents(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY + 0.2, this.mc.thePlayer.posZ, true));
			}
		}
		else if (this.aac.getValue()) {
			if (this.mc.thePlayer.ticksExisted % 30 == 0) {
			mc.getNetHandler().addToSendQueue(new C00Handshake());
			}
		}
		else if (this.viper.getValue()) {
			 event.setGround(true);
		        if (mc.thePlayer.ticksExisted % 4 != 0) {
                 this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, mc.thePlayer.posY + 1.0E-9, this.mc.thePlayer.posZ, true));
                 this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, mc.thePlayer.posY + 0, this.mc.thePlayer.posZ, true));
            }
		}
		else if (this.janitor.getValue()) {
            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
	        if (mc.thePlayer.ticksExisted % 2 == 0) {
				mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ);
			}
		}
		else if (this.playerpos.getValue()) {
			mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround ? true : false));
		}
		else if (this.unknownpos.getValue()) {
			mc.getNetHandler().addToSendQueue(new C06PacketPlayerPosLook(mc.thePlayer.posX, -999999999, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
		}
		else if (this.keepalive.getValue()) {
            for (int i = 0; i < 10; ++i) {
            	mc.thePlayer.sendQueue.addToSendQueue(new C00PacketKeepAlive(100));
            }
		}
		else if (this.guardian.getValue()) {
	        if (mc.thePlayer.ticksExisted % 2 == 0) {
	        	mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, -999999999, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
	        }
		}
		else if (this.state.getValue()) {
	        if (event.getState() == Event.State.PRE) {
	            return; 
	        }
		    if (event.getState() == Event.State.POST) {
		        return; 	            
		    }
		}
		else if (this.hcf.getValue()) {
			this.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY + 0.42, this.mc.thePlayer.posZ, true));
		}
		else if (this.bed.getValue()) {
			if (mc.thePlayer.isPlayerSleeping()) {
	        mc.thePlayer.sleeping = false;
	        mc.thePlayer.sleepTimer = 0;
			}
		}
		else if (this.dead.getValue()) {
	        if (mc.currentScreen instanceof GuiGameOver) {
	        	mc.displayGuiScreen(null);
	            mc.thePlayer.isDead = false;
	            mc.thePlayer.setHealth(20f);
	            mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ);            
	        }
		}
		else if (this.horizon.getValue()) {
			if (mc.thePlayer.isRiding()) {
	            for (int i = 0; i < 10; ++i) {
	                mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.RIDING_JUMP));
	            }
	            mc.thePlayer.ridingEntity.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY + 0.42, mc.thePlayer.posZ);
			}
		}
		else if (this.damage.getValue()) {
			 if (mc.thePlayer.ticksExisted % 20 == 0) {
		                ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY + 3.5, ClientUtils.player().posZ, false));
		                ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY, ClientUtils.player().posZ, false));
		            }
		            ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY, ClientUtils.player().posZ, true));
			 }
		else if (this.rac.getValue()) {
			event.setPitch(0.1384174174194174919581119481401384140135401383158513185475485491305371719231325984f);
		}
		else if (this.acr.getValue()) {
			ClientUtils.mc().thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(ClientUtils.mc().thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
		}
		else if (this.hover.getValue()) {
			event.setY(event.getY() + 10);
		}
		else if (this.spectate.getValue()) {
			NetUtil.sendPacketNoEvents(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
		}
    }
    
    @EventTarget
    public void onMove(final MoveEvent event) {
    }
}
