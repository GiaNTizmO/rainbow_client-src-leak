package slavikcodd3r.rainbow.module.modules.exploits;

import net.minecraft.util.AxisAlignedBB;
import net.minecraft.client.renderer.entity.RenderManager;
import org.lwjgl.opengl.GL11;
import net.minecraft.block.material.Material;
import net.minecraft.block.BlockSign;
import org.lwjgl.input.Mouse;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.block.Block;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import slavikcodd3r.rainbow.Rainbow;
import slavikcodd3r.rainbow.event.Event;
import slavikcodd3r.rainbow.event.EventTarget;
import slavikcodd3r.rainbow.event.events.ReachEvent;
import slavikcodd3r.rainbow.event.events.Render3DEvent;
import slavikcodd3r.rainbow.event.events.UpdateEvent;
import slavikcodd3r.rainbow.module.Module;
import slavikcodd3r.rainbow.module.modules.movement.Speed;
import slavikcodd3r.rainbow.utils.ClientUtils;
import slavikcodd3r.rainbow.utils.NetUtil;
import slavikcodd3r.rainbow.utils.RenderingUtils;

@Module.Mod(displayName = "Teleport", suffix = "Mineplex")
public class Teleport extends Module
{
	Minecraft mc = Minecraft.getMinecraft();
    private boolean canTP;
    private int delay;
    private BlockPos endPos;
    
    public void disable() {
        NetUtil.sendPacketNoEvents(new C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem));
        super.disable();
    }
    
    public static Block getBlockAtPos(final BlockPos inBlockPos) {
        Minecraft.getMinecraft();
        final IBlockState s = Minecraft.theWorld.getBlockState(inBlockPos);
        return s.getBlock();
    }
    
    public static void blinkToPos(final double[] startPos, final BlockPos endPos, final double slack) {
        double curX = startPos[0];
        double curY = startPos[1];
        double curZ = startPos[2];
        final double endX = endPos.getX() + 0.5;
        final double endY = endPos.getY() + 1.0;
        final double endZ = endPos.getZ() + 0.5;
        double distance = Math.abs(curX - endX) + Math.abs(curY - endY) + Math.abs(curZ - endZ);
        int count = 0;
        while (distance > slack) {
            distance = Math.abs(curX - endX) + Math.abs(curY - endY) + Math.abs(curZ - endZ);
            if (count > 120) {
                break;
            }
            final boolean next = false;
            final double diffX = curX - endX;
            final double diffY = curY - endY;
            final double diffZ = curZ - endZ;
            final double offset = ((count & 0x1) == 0x0) ? 0.4 : 0.1;
            if (diffX < 0.0) {
                if (Math.abs(diffX) > offset) {
                    curX += offset;
                }
                else {
                    curX += Math.abs(diffX);
                }
            }
            if (diffX > 0.0) {
                if (Math.abs(diffX) > offset) {
                    curX -= offset;
                }
                else {
                    curX -= Math.abs(diffX);
                }
            }
            if (diffY < 0.0) {
                if (Math.abs(diffY) > 0.25) {
                    curY += 0.25;
                }
                else {
                    curY += Math.abs(diffY);
                }
            }
            if (diffY > 0.0) {
                if (Math.abs(diffY) > 0.25) {
                    curY -= 0.25;
                }
                else {
                    curY -= Math.abs(diffY);
                }
            }
            if (diffZ < 0.0) {
                if (Math.abs(diffZ) > offset) {
                    curZ += offset;
                }
                else {
                    curZ += Math.abs(diffZ);
                }
            }
            if (diffZ > 0.0) {
                if (Math.abs(diffZ) > offset) {
                    curZ -= offset;
                }
                else {
                    curZ -= Math.abs(diffZ);
                }
            }
            Minecraft.getMinecraft().getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(curX, curY, curZ, true));
            ++count;
        }
    }
    
    @EventTarget
    public void onReach(final ReachEvent event) {
        if (Minecraft.theWorld != null) {
            event.setReach(500.0f);
        }
    }
    
    @EventTarget
    public void onPreUpdate(final UpdateEvent event) {
        //NetUtil.sendPacketNoEvents(new C09PacketHeldItemChange(Speed.airSlot()));
        //final C08PacketPlayerBlockPlacement place = new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer).add(0, -1, 0), EnumFacing.UP.getIndex(), null, 0.5f, 1.0f, 0.5f);
        //mc.thePlayer.sendQueue.addToSendQueue(new C0APacketAnimation());
        //mc.thePlayer.sendQueue.addToSendQueue(place);
        if (event.getState() == Event.State.PRE) {
            if (this.canTP && Mouse.isButtonDown(1) && !ClientUtils.mc().thePlayer.isSneaking() && this.delay == 0 && ClientUtils.mc().inGameHasFocus) {
                this.endPos = ClientUtils.mc().objectMouseOver.getBlockPos();
                final double[] startPos = { ClientUtils.mc().thePlayer.posX, ClientUtils.mc().thePlayer.posY, ClientUtils.mc().thePlayer.posZ };             
                blinkToPos(startPos, this.endPos, 0.0); 
                this.delay = 5;
            }
            if (this.delay > 0) {
                --this.delay;
            }
        }
    }
    
    @EventTarget
    public void onRender(final Render3DEvent event) {
        final int x = ClientUtils.mc().objectMouseOver.getBlockPos().getX();
        final int y = ClientUtils.mc().objectMouseOver.getBlockPos().getY();
        final int z = ClientUtils.mc().objectMouseOver.getBlockPos().getZ();
        final Block block1 = getBlockAtPos(new BlockPos(x, y, z));
        final Block block2 = getBlockAtPos(new BlockPos(x, y + 1.0, z));
        final Block block3 = getBlockAtPos(new BlockPos(x, y + 2.0, z));
        final boolean blockBelow = !(block1 instanceof BlockSign) && block1.getMaterial().isSolid();
        final boolean blockLevel = !(block2 instanceof BlockSign) && block1.getMaterial().isSolid();
        final boolean blockAbove = !(block3 instanceof BlockSign) && block1.getMaterial().isSolid();
        if (getBlockAtPos(ClientUtils.mc().objectMouseOver.getBlockPos()).getMaterial() != Material.air && blockBelow && blockLevel && blockAbove) {
        	this.canTP = true;
        }
        else {
            this.canTP = false;
        }
    }
}
