package slavikcodd3r.rainbow.module.modules.exploits;

import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import slavikcodd3r.rainbow.event.EventTarget;
import slavikcodd3r.rainbow.event.events.MoveEvent;
import slavikcodd3r.rainbow.event.events.PacketReceiveEvent;
import slavikcodd3r.rainbow.event.events.PacketSendEvent;
import slavikcodd3r.rainbow.event.events.TickEvent;
import slavikcodd3r.rainbow.event.events.UpdateEvent;
import slavikcodd3r.rainbow.module.Module;
import slavikcodd3r.rainbow.module.modes.CombatDisablerMode;
import slavikcodd3r.rainbow.module.modes.TestMode;
import slavikcodd3r.rainbow.option.OptionManager;
import slavikcodd3r.rainbow.utils.ClientUtils;
import slavikcodd3r.rainbow.utils.NetUtil;

@Module.Mod(displayName = "CombatDisabler")
public class CombatDisabler extends Module
{
	private CombatDisablerMode mineplex;
	private CombatDisablerMode ncp;
	private CombatDisablerMode aerox;
	private CombatDisablerMode packet;
	private CombatDisablerMode event;
	private CombatDisablerMode cancel;
	private CombatDisablerMode position;
    public static Minecraft mc = Minecraft.getMinecraft();
    
    public CombatDisabler() {
        this.mineplex = new CombatDisablerMode("Mineplex", true, this);
        this.ncp = new CombatDisablerMode("NCP", false, this);
        this.aerox = new CombatDisablerMode("Aerox", false, this);
        this.packet = new CombatDisablerMode("Packet", false, this);
        this.event = new CombatDisablerMode("Event", false, this);
        this.cancel = new CombatDisablerMode("Cancel", false, this);
        this.position = new CombatDisablerMode("Position", false, this);
    }
    
    @Override
    public void preInitialize() {
        OptionManager.getOptionList().add(this.mineplex);
        OptionManager.getOptionList().add(this.ncp);
        OptionManager.getOptionList().add(this.aerox);
        OptionManager.getOptionList().add(this.packet);
        OptionManager.getOptionList().add(this.event);
        OptionManager.getOptionList().add(this.cancel);
        OptionManager.getOptionList().add(this.position);
        this.updateSuffix();
        super.preInitialize();
    }
    
    public void updateSuffix() {
        if (this.mineplex.getValue()) {
            this.setSuffix("Mineplex");
        }
        else if (this.ncp.getValue()) {
            this.setSuffix("NCP");
        }
        else if (this.aerox.getValue()) {
            this.setSuffix("Aerox");
        }
        else if (this.packet.getValue()) {
        	this.setSuffix("Packet");
        }
        else if (this.event.getValue()) {
        	this.setSuffix("Event");
        }
        else if (this.cancel.getValue()) {
        	this.setSuffix("Cancel");
        }
        else if (this.position.getValue()) {
        	this.setSuffix("Position");
        }
    }
    
    public void enable() {
    	super.enable();
    }
    
    public void disable() {
    	super.disable();
    }
    
    @EventTarget
    public void onTick(final TickEvent event) {
        this.updateSuffix();
    }
    
    @EventTarget
    public void onPacket(final PacketSendEvent event) {
    	if (this.mineplex.getValue()) {
    		if (event.getPacket() instanceof C00PacketKeepAlive) {
    			event.setCancelled(true);
    		}
    		if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
    			event.setCancelled(true);
    		}
    		if (event.getPacket() instanceof C03PacketPlayer) {
            	NetUtil.sendPacketNoEvents(new C13PacketPlayerAbilities());
            }
    		if (event.getPacket() instanceof C13PacketPlayerAbilities) {
                final C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities)event.getPacket();
                packet.allowFlying = true;
                packet.creativeMode = true;
                packet.flying = true;
                packet.setAllowFlying(true);
                packet.setCreativeMode(true);
                packet.setFlying(true);
                packet.setFlySpeed(Float.POSITIVE_INFINITY);
                packet.setWalkSpeed(Float.POSITIVE_INFINITY);
    		}
    	}
    	else if (this.ncp.getValue()) {
    		if (event.getPacket() instanceof C00PacketKeepAlive) {
    			event.setCancelled(true);
    		}
    		if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
    			event.setCancelled(true);
    		}
    		if (event.getPacket() instanceof C03PacketPlayer) {
            	NetUtil.sendPacketNoEvents(new C13PacketPlayerAbilities());
            }
    		if (event.getPacket() instanceof C13PacketPlayerAbilities) {
                final C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities)event.getPacket();
                packet.allowFlying = true;
                packet.creativeMode = true;
                packet.flying = true;
                packet.setAllowFlying(true);
                packet.setCreativeMode(true);
                packet.setFlying(true);
                packet.setFlySpeed(Float.POSITIVE_INFINITY);
                packet.setWalkSpeed(Float.POSITIVE_INFINITY);
    		}
    	}
    	else if (this.aerox.getValue()) {
    		if (event.getPacket() instanceof C13PacketPlayerAbilities) {
                final C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities)event.getPacket();
                packet.allowFlying = true;
                packet.creativeMode = true;
                packet.flying = true;
                packet.setAllowFlying(true);
                packet.setCreativeMode(true);
                packet.setFlying(true);
    		}
    	}
    	else if (this.cancel.getValue()) {
    		if (event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook) {
    			event.setCancelled(true);
    		}
    	}
    }
    
    @EventTarget
    public void onPacket(final PacketReceiveEvent event) {
    	if (this.aerox.getValue()) {
    		if (event.getPacket() instanceof S32PacketConfirmTransaction) {
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof S00PacketKeepAlive) {
                event.setCancelled(true);
            }
    	}
    }
    
    @EventTarget
    public void onUpdate(final UpdateEvent event) {
    	if (this.packet.getValue()) {
    		mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(999999999, 999999999, false));
    	}
    	else if (this.event.getValue()) {
    		event.setYaw(999999999);
    		event.setPitch(999999999);
    	}
    	else if (this.position.getValue()) {
    		mc.thePlayer.setRotationYawHead(999999999);
    		mc.thePlayer.setRotationPitchHead(999999999);
    	}
    }
    
    @EventTarget
    public void onMove(final MoveEvent event) {
    }
}
