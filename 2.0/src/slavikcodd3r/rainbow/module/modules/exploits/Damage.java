package slavikcodd3r.rainbow.module.modules.exploits;

import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C03PacketPlayer;
import slavikcodd3r.rainbow.event.EventTarget;
import slavikcodd3r.rainbow.event.events.BlockCullEvent;
import slavikcodd3r.rainbow.event.events.BoundingBoxEvent;
import slavikcodd3r.rainbow.event.events.MoveEvent;
import slavikcodd3r.rainbow.event.events.PushOutOfBlocksEvent;
import slavikcodd3r.rainbow.event.events.TickEvent;
import slavikcodd3r.rainbow.event.events.UpdateEvent;
import slavikcodd3r.rainbow.module.Module;
import slavikcodd3r.rainbow.module.modes.DamageMode;
import slavikcodd3r.rainbow.module.modes.TestMode;
import slavikcodd3r.rainbow.option.OptionManager;
import slavikcodd3r.rainbow.utils.ClientUtils;

@Module.Mod(displayName = "Damage")
public class Damage extends Module
{
	private DamageMode packet;
	private DamageMode forpacket;
	private DamageMode position;
	private DamageMode down;
	private DamageMode cubecraft;
	private DamageMode jump;
	private DamageMode noground;
	private DamageMode creative;
	private DamageMode teleport;
	private DamageMode hover;
	private DamageMode nullmod;
    int counter = 0;
    public static Minecraft mc = Minecraft.getMinecraft();
    
    public Damage() {
        this.packet = new DamageMode("Packet", true, this);
        this.forpacket = new DamageMode("ForPacket", false, this);
        this.position = new DamageMode("Position", false, this);
        this.down = new DamageMode("Down", false, this);
        this.cubecraft = new DamageMode("CubeCraft", false, this);
        this.jump = new DamageMode("Jump", false, this);
        this.noground = new DamageMode("NoGround", false, this);
        this.creative = new DamageMode("Creative", false, this);
        this.teleport = new DamageMode("Teleport", false, this);
        this.hover = new DamageMode("Hover", false, this);
        this.nullmod = new DamageMode("Null", false, this);
    }
    
    @Override
    public void preInitialize() {
        OptionManager.getOptionList().add(this.packet);
        OptionManager.getOptionList().add(this.forpacket);
        OptionManager.getOptionList().add(this.position);
        OptionManager.getOptionList().add(this.down);
        OptionManager.getOptionList().add(this.cubecraft);
        OptionManager.getOptionList().add(this.jump);
        OptionManager.getOptionList().add(this.noground);
        OptionManager.getOptionList().add(this.creative);
        OptionManager.getOptionList().add(this.teleport);
        OptionManager.getOptionList().add(this.hover);
        OptionManager.getOptionList().add(this.nullmod);
        this.updateSuffix();
        super.preInitialize();
    }
    
    public void updateSuffix() {
        if (this.packet.getValue()) {
            this.setSuffix("Packet");
        }
        else if (this.forpacket.getValue()) {
        	this.setSuffix("ForPacket");
        }
        else if (this.position.getValue()) {
        	this.setSuffix("Position");
        }
        else if (this.down.getValue()) {
        	this.setSuffix("Down");
        }
        else if (this.cubecraft.getValue()) {
        	this.setSuffix("CubeCraft");
        }
        else if (this.jump.getValue()) {
        	this.setSuffix("Jump");
        }
        else if (this.noground.getValue()) {
        	this.setSuffix("NoGround");
        }
        else if (this.creative.getValue()) {
        	this.setSuffix("Creative");
        }
        else if (this.teleport.getValue()) {
        	this.setSuffix("Teleport");
        }
        else if (this.hover.getValue()) {
        	this.setSuffix("Hover");
        }
        else if (this.nullmod.getValue()) {
        	this.setSuffix("Null");
        }
    }
    
    public void enable() {
    	this.counter = 0;
    	if (this.nullmod.getValue()) {
    		super.enable();
    	}
    	if (this.hover.getValue()) {
    		super.enable();
    	}
    	if (this.teleport.getValue()) {
    		mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY - 4, mc.thePlayer.posZ);
    	}
    	if (this.creative.getValue()) {
    		super.enable();
    	}
    	if (this.noground.getValue()) {
    		super.enable();
    	}
    	if (this.jump.getValue()) {
    		mc.thePlayer.motionY = 5;
    	}
    	if (this.cubecraft.getValue()) {
    		mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 4, mc.thePlayer.posZ, false));
        	mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
    	}
    	if (this.down.getValue()) {
    		mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - 4, mc.thePlayer.posZ);
    	}
    	if (this.position.getValue()) {
    		mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3.5, mc.thePlayer.posZ);
    	}
    	if (this.forpacket.getValue()) {
    		for (int i = 0; i < 80.0 + 40.0 * (0.5 - 0.5); ++i) {
                ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY + 0.049, ClientUtils.player().posZ, false));
                ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY, ClientUtils.player().posZ, false));
            }
            ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY, ClientUtils.player().posZ, true));
    	}
    	if (this.packet.getValue()) {
            ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY + 3.5, ClientUtils.player().posZ, false));
            ClientUtils.player().sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(ClientUtils.player().posX, ClientUtils.player().posY, ClientUtils.player().posZ, true));
        }
    }
    
    public void disable() {
    	this.counter = 0;
    	super.disable();
    }
    
    @EventTarget
    public void onTick(final TickEvent event) {
        this.updateSuffix();
    }
    
    @EventTarget
    public void onUpdate(final UpdateEvent event) {
    	if (this.noground.getValue()) {
    		event.setGround(false);
    		mc.gameSettings.keyBindJump.pressed = true;
    	}
    	else if (this.creative.getValue()) {
    		mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY -= 1337, mc.thePlayer.posZ, true));
    		mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
    		mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY += 1337, mc.thePlayer.posZ, true));
    	}
    	else if (this.hover.getValue()) {
    		if (this.counter == 0) {
				event.setY(event.getY() + 0.41999998688697815);
			}
			if (this.counter == 1) {
				event.setY(event.getY() + 0.33319999363422365);
			}
			if (this.counter == 2) {
				event.setY(event.getY() + 0.24813599859094576);
			}
			if (this.counter == 3) {
				event.setY(event.getY() + 0.16477328182606651);
			}
			if (this.counter == 4) {
				event.setY(event.getY() + 0.08307781780646721);
			}
			if (this.counter == 5) {
				event.setY(event.getY() + 0);
			}
			if (this.counter == 6) {
				event.setY(event.getY() - 0.0784000015258789);
			}
			if (this.counter == 7) {
				event.setY(event.getY() - 0.1552320045166016);
			}
			if (this.counter == 8) {
				event.setY(event.getY() - 0.230527368912964);
			}
			if (this.counter == 9) {
				event.setY(event.getY() - 0.30431682745754424);
			}
			if (this.counter == 10) {
				event.setY(event.getY() - 0.37663049823865513);
			}
			if (this.counter == 11) {
				event.setY(event.getY() - 0.44749789698341763);
			}
			if (this.counter == 12) {
				event.setY(event.getY() - 0.0784000015258789);
				this.counter = 0;
			}
			counter++;
    	}
    	else if (this.nullmod.getValue()) {
    		event.setGround(true);
    	}
    }
    
    @EventTarget
    private void onBoundingBox(final BoundingBoxEvent event) {
    	if (this.nullmod.getValue()) {
        event.setBoundingBox(null);
    	}
    }
    
    @EventTarget
    private void onPushOutOfBlocks(final PushOutOfBlocksEvent event) {
    	if (this.nullmod.getValue()) {
        event.setCancelled(true);
    	}
    }
    
    @EventTarget
    private void onBlockCull(final BlockCullEvent event) {
    	if (this.nullmod.getValue()) {
        event.setCancelled(true);
    	}
    }
    
    @EventTarget
    public void onMove(final MoveEvent event) {
    }
}
